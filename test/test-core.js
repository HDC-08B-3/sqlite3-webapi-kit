/*jshint white:false, eqnull:true, immed:false, globalstrict:true, node:true */
'use strict';

// Generated by CoffeeScript 1.6.2
var assert, coverage, dbname, e, fs, sqlited, vows,
  _this = this;

vows = require('vows');

assert = require('assert');

fs = require('fs');

try {
  coverage = require('coverage');
  sqlited = coverage.require("" + __dirname + "/../lib/sqlite3-webapi-kit");
} catch (_error) {
  e = _error;
  sqlited = coverage.require("../lib/sqlite3-webapi-kit");
}

dbname = 'test.db3';

vows.describe('core test').addBatch({
  'DB指定なし: メモリ上のDBを開く': {
    topic: function() {
      var _this = this;

      sqlited.open(function(err) {
        return _this.callback(err, sqlited.dbname());
      });
    },
    'DBオブジェクトのfilenameが「:memory:」になっている': function(topic) {
      return assert.equal(topic, ':memory:');
    }
  }
}).addBatch({
  '2重オープン': {
    topic: function() {
      var _this = this;

      sqlited.open(function(err) {
        return _this.callback(null, err.errno);
      });
    },
    '1007エラーが発生する': function(topic) {
      return assert.equal(topic, 1007);
    }
  }
}).addBatch({
  'DBクローズ': {
    topic: function() {
      var _this = this;

      sqlited.close(function(err) {
        return _this.callback(err, sqlited._db);
      });
    },
    '_dbがnullになっている': function(topic) {
      return assert.equal(topic, null);
    }
  }
}).addBatch({
  '2重クローズ(何もしない)': {
    topic: function() {
      var _this = this;

      sqlited.close(function(err) {
        return _this.callback(err, sqlited._db);
      });
    },
    '_dbがnullになっている': function(topic) {
      return assert.equal(topic, null);
    }
  }
}).addBatch({
  'DBを開いていない状態でスキーマ取得': {
    topic: function() {
      var _this = this;

      sqlited.schema(function(err, result) {
        return _this.callback(null, err.errno);
      });
    },
    '1008エラーが発生する': function(topic) {
      return assert.equal(topic, 1008);
    }
  }
}).addBatch({
  'DB指定(:memory:) & オープン時実行SQLなし: メモリ上のDBを開く': {
    topic: function() {
      var _this = this;

      sqlited.close(function() {
        return sqlited.open(':memory:', function(err) {
          return _this.callback(err, sqlited.dbname());
        });
      });
    },
    'DBオブジェクトのfilenameが「:memory:」になっている': function(topic) {
      return assert.equal(topic, ':memory:');
    }
  }
}).addBatch({
  'DB指定(:memory:) & オープン時実行SQL指定(文字列): メモリ上のDBを開いてSQLを実行': {
    topic: function() {
      var _this = this;

      sqlited.close(function() {
        var initSql;

        initSql = 'create table test (c integer)';
        return sqlited.open(':memory:', initSql, function(err) {
          var chkSql;

          if (err != null) {
            return _this.callback(err);
          }
          chkSql = "select * from sqlite_master where type = 'table'";
          return sqlited.get(chkSql, function(err, result) {
            return _this.callback(err, {
              sql: initSql,
              dbname: sqlited.dbname(),
              result: result
            });
          });
        });
      });
    },
    'DBオブジェクトのfilenameが「:memory:」になっている': function(topic) {
      return assert.equal(topic.dbname, ':memory:');
    },
    'testテーブルが作成されている': function(topic) {
      return assert.equal(topic.result.length, 1);
    },
    '登録されたtestテーブルのSQLと作成時SQLが同一': function(topic) {
      return assert.equal(topic.result[0].sql.toUpperCase(), topic.sql.toUpperCase());
    }
  }
}).addBatch({
  'DB指定(:memory:) & オープン時実行SQL指定(配列): メモリ上のDBを開いてSQLを実行': {
    topic: function() {
      var _this = this;

      sqlited.close(function() {
        var initSql;

        initSql = ['create table test (c varchar(100))', "insert into test (c) values ('テスト')"];
        return sqlited.open(':memory:', initSql, function(err) {
          var chkSql;

          if (err != null) {
            return _this.callback(err);
          }
          chkSql = 'select * from test';
          return sqlited.get(chkSql, function(err, result) {
            return _this.callback(err, {
              dbname: sqlited.dbname(),
              result: result
            });
          });
        });
      });
    },
    'DBオブジェクトのfilenameが「:memory:」になっている': function(topic) {
      return assert.equal(topic.dbname, ':memory:');
    },
    'testテーブルにデータが1件作成されている': function(topic) {
      return assert.equal(topic.result.length, 1);
    },
    'testテーブルの内容の検証': function(topic) {
      return assert.equal(topic.result[0].c, 'テスト');
    }
  }
}).addBatch({
  'DBを開いていない状態でget': {
    topic: function() {
      var _this = this;

      sqlited.close(function() {
        return sqlited.get('select * from test', function(err, result) {
          return _this.callback(null, err.errno);
        });
      });
    },
    '1008エラーが発生する': function(topic) {
      return assert.equal(topic, 1008);
    }
  }
}).addBatch({
  'DBを開いていない状態でpost': {
    topic: function() {
      var _this = this;

      sqlited.post('delete from test', function(err, result) {
        return _this.callback(null, err.errno);
      });
    },
    '1008エラーが発生する': function(topic) {
      return assert.equal(topic, 1008);
    }
  }
}).addBatch({
  'DBを開いていない状態でpostMulti': {
    topic: function() {
      var sql,
        _this = this;

      sql = ['update test set c = null', "update test set c = 'test'"];
      sqlited.postMulti(sql, function(err, result) {
        return _this.callback(null, err.errno);
      });
    },
    '1008エラーが発生する': function(topic) {
      return assert.equal(topic, 1008);
    }
  }
}).addBatch({
  'DB指定(ファイル名) & オープン時実行SQL指定(配列): ディスク上にDBを作成してSQLを実行': {
    topic: function() {
      var initSql,
        _this = this;

      if (fs.existsSync(dbname)) {
        fs.unlinkSync(dbname);
      }
      initSql = ['create table test1 (c1 integer, c2 varchar(100))', 'create index idx_test1_c1 on test1(c1)', "insert into test1 (c1, c2) values (1, 'てすと01')", "insert into test1 (c1, c2) values (2, 'てすと02')", "insert into test1 (c1, c2) values (3, 'てすと03')"];
      sqlited.open(dbname, initSql, function(err) {
        if (err != null) {
          return _this.callback(err);
        }
        return sqlited.close(function() {
          if (err != null) {
            return _this.callback(err);
          }
          return sqlited.open(dbname, function(err) {
            var chkSql;

            if (err != null) {
              return _this.callback(err);
            }
            chkSql = 'select * from test1';
            return sqlited.get(chkSql, function(err, result) {
              return _this.callback(err, {
                dbname: sqlited.dbname(),
                result: result
              });
            });
          });
        });
      });
    },
    'DBオブジェクトのfilenameがファイル名になっている': function(topic) {
      return assert.equal(topic.dbname, dbname);
    },
    'test1テーブルにデータが3件作成されている': function(topic) {
      return assert.equal(topic.result.length, 3);
    },
    'test1テーブルの内容の検証': function(topic) {
      var i, r, _i, _len, _ref, _results;

      _ref = topic.result;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        r = _ref[i];
        assert.equal(r.c1, i + 1);
        _results.push(assert.equal(r.c2, "てすと0" + (i + 1)));
      }
      return _results;
    }
  }
}).addBatch({
  'getメソッド(バインドなし & 0件)': {
    topic: function() {
      var sql,
        _this = this;

      sql = 'select * from test1 where c2 is null';
      sqlited.get(sql, function(err, result) {
        return _this.callback(err, result.length);
      });
    },
    '取得結果が0件': function(topic) {
      return assert.equal(topic, 0);
    }
  }
}).addBatch({
  'getメソッド(文字列bind)': {
    topic: function() {
      var bind, sql,
        _this = this;

      sql = 'select * from test1 where c2 like ?';
      bind = '%02';
      sqlited.get(sql, bind, function(err, result) {
        return _this.callback(err, result);
      });
    },
    'test1テーブルの内容の検証': function(topic) {
      assert.equal(topic.length, 1);
      return assert.equal(topic[0].c1, 2);
    }
  }
}).addBatch({
  'getメソッド(数値bind)': {
    topic: function() {
      var bind, sql,
        _this = this;

      sql = 'select * from test1 where c1 < ?';
      bind = '3';
      sqlited.get(sql, bind, function(err, result) {
        return _this.callback(err, result);
      });
    },
    'test1テーブルの内容の検証': function(topic) {
      assert.equal(topic.length, 2);
      return assert.equal(topic[0].c1, 1);
    }
  }
}).addBatch({
  'getメソッド(配列bind)': {
    topic: function() {
      var bind, sql,
        _this = this;

      sql = 'select c1 from test1 where c1 = ? or c2 like ? order by c1 desc';
      bind = [1, '%03'];
      sqlited.get(sql, bind, function(err, result) {
        return _this.callback(err, result);
      });
    },
    'test1テーブルの内容の検証': function(topic) {
      return assert.deepEqual(topic, [
        {
          c1: 3
        }, {
          c1: 1
        }
      ]);
    }
  }
}).addBatch({
  'getメソッド(連想配列bind)': {
    topic: function() {
      var bind, sql,
        _this = this;

      sql = 'select c2 from test1 where c1 = $c1 or c2 like $c2';
      bind = {
        $c1: 2,
        $c2: '%01'
      };
      sqlited.get(sql, bind, function(err, result) {
        return _this.callback(err, result);
      });
    },
    'test1テーブルの内容の検証': function(topic) {
      return assert.deepEqual(topic, [
        {
          c2: 'てすと01'
        }, {
          c2: 'てすと02'
        }
      ]);
    }
  }
}).addBatch({
  'getメソッド(存在しないテーブル)': {
    topic: function() {
      var sql,
        _this = this;

      sql = 'select * from tttest1';
      sqlited.get(sql, function(err, result) {
        return _this.callback(null, err.message);
      });
    },
    'エラーメッセージの検証': function(topic) {
      return assert.match(topic, /no such table/);
    }
  }
}).addBatch({
  'getメソッドで配列を指定': {
    topic: function() {
      var sql,
        _this = this;

      sql = ['select * from test1', 'select * from test2'];
      sqlited.get(sql, function(err, result) {
        return _this.callback(null, err.errno);
      });
    },
    '1003エラーが発生する': function(topic) {
      return assert.equal(topic, 1003);
    }
  }
}).addBatch({
  'getメソッドでselect文以外を実行': {
    topic: function() {
      var _this = this;

      sqlited.get("insert into test1 (c2) values ('てすと99')", function(err, result) {
        return _this.callback(null, err.errno);
      });
    },
    '1006エラーが発生する': function(topic) {
      return assert.equal(topic, 1006);
    }
  }
}).addBatch({
  'postMultiメソッド': {
    topic: function() {
      var sql,
        _this = this;

      sql = ['create table test2 (f1 integer primary key, f2 integer default 0, f3 text, f4 varchar ( 16 ) default null)', 'create view view_test2_f1_f4 as select f1, f4 from test2', 'create index idx_test2_f2_f3 on test2(f2, f3)', 'create index idx_test2_f2_f4 on test2(f2, f4)'];
      sqlited.postMulti(sql, function(err, result) {
        var chkSql;

        if (err != null) {
          return _this.callback(err);
        }
        chkSql = "select * from sqlite_master where type = 'table' and name = 'test2'";
        return sqlited.get(chkSql, function(err, result) {
          return _this.callback(err, {
            sql: sql[0],
            result: result
          });
        });
      });
    },
    'test2テーブルが作成されている': function(topic) {
      return assert.equal(topic.result.length, 1);
    },
    '登録されたtestテーブルのSQLと作成時SQLが同一': function(topic) {
      return assert.equal(topic.result[0].sql.toUpperCase(), topic.sql.toUpperCase());
    }
  }
}).addBatch({
  'postメソッド': {
    topic: function() {
      var bind, sql,
        _this = this;

      sql = 'insert into test2 (f3) values (?)';
      bind = 'testtesttest';
      sqlited.post(sql, bind, function(err, updateInfo) {
        if (err != null) {
          return _this.callback(err);
        }
        return sqlited.get('select * from test2', function(err, result) {
          return _this.callback(err, {
            updateInfo: updateInfo,
            result: result
          });
        });
      });
    },
    '更新処理結果の検証': function(topic) {
      assert.equal(topic.updateInfo.lastID, 1);
      return assert.equal(topic.updateInfo.changes, 1);
    },
    '更新後のtest2テーブルの検証': function(topic) {
      var expected;

      expected = {
        f1: 1,
        f2: 0,
        f3: 'testtesttest',
        f4: null
      };
      return assert.deepEqual(topic.result[0], expected);
    }
  }
}).addBatch({
  'スキーマ取得': {
    topic: function() {
      var _this = this;

      sqlited.schema(function(err, result) {
        return _this.callback(err, result);
      });
    },
    'スキーマの検証': function(topic) {
      var expected1, expected2, expected3;

      expected1 = {
        fields: [
          {
            name: 'c1',
            type: 'integer'
          }, {
            name: 'c2',
            type: 'varchar',
            length: 100
          }
        ],
        indexes: {
          idx_test1_c1: ['c1']
        },
        sql: 'CREATE TABLE test1 (c1 integer, c2 varchar(100))'
      };
      assert.deepEqual(topic.main.tables.test1, expected1);
      expected2 = {
        fields: [
          {
            name: 'f1',
            type: 'integer',
            primary_key: true
          }, {
            name: 'f2',
            type: 'integer',
            "default": 0
          }, {
            name: 'f3',
            type: 'text'
          }, {
            name: 'f4',
            type: 'varchar',
            length: 16,
            "default": null
          }
        ],
        indexes: {
          idx_test2_f2_f3: ['f2', 'f3'],
          idx_test2_f2_f4: ['f2', 'f4']
        },
        sql: 'CREATE TABLE test2 (f1 integer primary key, f2 integer default 0, f3 text, f4 varchar ( 16 ) default null)'
      };
      assert.deepEqual(topic.main.tables.test2, expected2);
      expected3 = {
        view_test2_f1_f4: 'CREATE VIEW view_test2_f1_f4 as select f1, f4 from test2'
      };
      return assert.deepEqual(topic.main.views, expected3);
    }
  }
}).addBatch({
  '不正なSQLでpostメソッド': {
    topic: function() {
      var _this = this;

      sqlited.post('update test1 set c999 = ?', 'xxx', function(err, result) {
        return _this.callback(null, err.message);
      });
    },
    'エラーメッセージの検証': function(topic) {
      return assert.match(topic, /no such column/);
    }
  }
}).addBatch({
  'postメソッドでSELECT文を実行': {
    topic: function() {
      var _this = this;

      sqlited.post('select * from test1', function(err, result) {
        return _this.callback(null, err.errno);
      });
    },
    '1005エラーが発生する': function(topic) {
      return assert.equal(topic, 1005);
    }
  }
}).addBatch({
  'postメソッドで配列を指定': {
    topic: function() {
      var sql,
        _this = this;

      sql = ['delete from test1', 'delete from test2'];
      sqlited.post(sql, function(err, result) {
        return _this.callback(null, err.errno);
      });
    },
    '1003エラーが発生する': function(topic) {
      return assert.equal(topic, 1003);
    }
  }
}).addBatch({
  '不正なSQLでpostMultiメソッド(実行前)': {
    topic: function() {
      var _this = this;

      sqlited.postMulti(999, function(err, result) {
        return _this.callback(null, err.errno);
      });
    },
    '1003エラーが発生する': function(topic) {
      return assert.equal(topic, 1003);
    }
  }
}).addBatch({
  '不正なSQLでpostMultiメソッド(実行時)': {
    topic: function() {
      var _this = this;

      sqlited.postMulti('drop table test0', function(err, result) {
        return _this.callback(null, err.message);
      });
    },
    'エラーメッセージの検証': function(topic) {
      return assert.match(topic, /no such table/);
    }
  }
}).addBatch({
  'postMultiメソッドでSQL配列の途中でSELECT文を実行(トランザクション指定)': {
    topic: function() {
      var sql,
        _this = this;

      sql = ['delete from test1', 'select count(*) as c from test1'];
      sqlited.postMulti(sql, true, function(err, result) {
        var errno;

        if (err == null) {
          return _this.callback(true);
        }
        errno = err.errno;
        return sqlited.get('select count(*) as cnt from test1', function(err, result) {
          return _this.callback(err, {
            errno: errno,
            result: result
          });
        });
      });
    },
    '1005エラーが発生する': function(topic) {
      return assert.equal(topic.errno, 1005);
    },
    'ロールバックされている': function(topic) {
      return assert.deepEqual(topic.result, [
        {
          cnt: 3
        }
      ]);
    }
  }
})["export"](module);
