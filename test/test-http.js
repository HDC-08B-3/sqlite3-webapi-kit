/*jshint white:false, eqnull:true, immed:false, globalstrict:true, node:true */
'use strict';

// Generated by CoffeeScript 1.6.2
var GET, HEAD, assert, async, coverage, dbname, e, fs, request, sqlited, vows,
  _this = this;

vows = require('vows');

assert = require('assert');

fs = require('fs');

async = require('async');

request = require('request');

try {
  coverage = require('coverage');
} catch (_error) {
  e = _error;
  coverage = {
    require: require
  };
}

try {
  sqlited = coverage.require("" + __dirname + "/../lib/sqlite3-webapi-kit");
} catch (_error) {
  e = _error;
  sqlited = coverage.require("../lib/sqlite3-webapi-kit");
}

dbname = 'test.db3';

GET = function(path, param, callback) {
  if (param instanceof Function) {
    callback = param;
    param = void 0;
  }
  request({
    uri: "http://localhost:4983" + path,
    qs: param
  }, function(err, res, body) {
    var ret;

    ret = JSON.parse(body);
    return callback(err, {
      statusCode: res.statusCode,
      result: ret.result,
      error: ret.error
    });
  });
};

HEAD = function(path, param, callback) {
  if (param instanceof Function) {
    callback = param;
    param = void 0;
  }
  request({
    method: 'HEAD',
    uri: "http://localhost:4983" + path,
    qs: param
  }, function(err, res, body) {
    return callback(void 0, err);
  });
};

vows.describe('http server test').addBatch({
  'カスタムhttpメソッド追加': {
    topic: function() {
      var _this = this;

      sqlited.addMethod('/hoge', function(param, callback) {
        if (param.age < 0) {
          return callback('error: < 0');
        }
        if (param.age > 100) {
          return callback(new Error('error: > 100'));
        }
        return sqlited.get('SELECT * FROM user where sex = ? AND age > ? ORDER by id', [param.sex, param.age], callback);
      });
      return sqlited.methods();
    },
    'メソッドが追加されている': function(topic) {
      return assert.include(topic, '/hoge');
    }
  }
}).addBatch({
  'カスタムhttpメソッド追加(関数以外を登録)': {
    topic: function() {
      return sqlited.addMethod('/fuga', 999);
    },
    '登録失敗': function(topic) {
      return assert.isFalse(topic);
    }
  }
}).addBatch({
  'httpリクエスト時のフック関数を登録(関数以外を登録)': {
    topic: function() {
      return sqlited.setHook('function');
    },
    '登録失敗': function(topic) {
      return assert.isFalse(topic);
    }
  }
}).addBatch({
  'httpリクエスト時のフック関数を登録(アクセス禁止)': {
    topic: function() {
      var _this = this;

      return sqlited.setHook(function(remoteAddress, request) {
        return false;
      });
    },
    '正常に登録されている': function(topic) {
      return assert.isTrue(topic);
    }
  }
}).addBatch({
  'DBを開いてサーバーを公開': {
    topic: function() {
      var initSql,
        _this = this;

      initSql = ['CREATE TABLE user (id INTEGER PRIMARY KEY, name VARCHAR(100), sex VARCHAR(6), age INTEGER)', 'CREATE INDEX idx_user_sex_age ON user (sex, age)'];
      sqlited.close(function() {
        return sqlited.open(':memory:', initSql, function(err) {
          var users;

          users = [
            {
              $name: 'taro',
              $sex: 'male',
              $age: 30
            }, {
              $name: 'jiro',
              $sex: 'male',
              $age: 25
            }, {
              $name: 'saburo',
              $sex: 'male',
              $age: 20
            }, {
              $name: 'hanako',
              $sex: 'female',
              $age: 15
            }
          ];
          return async.eachSeries(users, function(item, next) {
            return sqlited.post('INSERT INTO user (name, sex, age) VALUES ($name, $sex, $age)', item, function(err) {
              return next(err);
            });
          }, function(err) {
            return sqlited.listen(function() {
              return GET('/', _this.callback);
            });
          });
        });
      });
    },
    'localhost:4983にアクセスできる(403)': function(topic) {
      return assert.equal(topic.statusCode, 403);
    },
    '1002エラーが発生する': function(topic) {
      return assert.equal(topic.error.errno, 1002);
    }
  }
}).addBatch({
  'httpリクエスト時のフック関数を登録(アクセス許可)': {
    topic: function() {
      var _this = this;

      return sqlited.setHook(function(remoteAddress, request) {
        return true;
      });
    },
    '正常に登録されている': function(topic) {
      return assert.isTrue(topic);
    }
  }
}).addBatch({
  '存在しないhttpメソッドにアクセス': {
    topic: function() {
      return GET('/', this.callback);
    },
    'httpレスポンスステータスコード: 404': function(topic) {
      return assert.equal(topic.statusCode, 404);
    },
    '1001エラーが発生する': function(topic) {
      return assert.equal(topic.error.errno, 1001);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /query': {
    topic: function() {
      return GET('/query', {
        sql: 'select * from user'
      }, this.callback);
    },
    'httpレスポンスステータスコード: 200': function(topic) {
      return assert.equal(topic.statusCode, 200);
    },
    '現在のuserテーブルの内容を取得': function(topic) {
      return assert.deepEqual(topic.result, [
        {
          id: 1,
          name: 'taro',
          sex: 'male',
          age: 30
        }, {
          id: 2,
          name: 'jiro',
          sex: 'male',
          age: 25
        }, {
          id: 3,
          name: 'saburo',
          sex: 'male',
          age: 20
        }, {
          id: 4,
          name: 'hanako',
          sex: 'female',
          age: 15
        }
      ]);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /query (エラー)': {
    topic: function() {
      return GET('/query', {
        sql: 123
      }, this.callback);
    },
    'httpレスポンスステータスコード: 500': function(topic) {
      return assert.equal(topic.statusCode, 500);
    },
    'エラー情報に実行したSQLが入っている': function(topic) {
      return assert.equal(topic.error.sql, 123);
    },
    '1エラーが発生する': function(topic) {
      return assert.equal(topic.error.errno, 1);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /insert': {
    topic: function() {
      return GET('/insert', {
        table: 'user',
        fields: 'name,age',
        values: "'jack',50"
      }, this.callback);
    },
    'httpレスポンスステータスコード: 200': function(topic) {
      return assert.equal(topic.statusCode, 200);
    },
    '実行SQLの検証': function(topic) {
      return assert.equal(topic.result.sql, "INSERT INTO user (name,age) VALUES ('jack',50)");
    },
    '挿入された行は1行': function(topic) {
      return assert.equal(topic.result.changes, 1);
    },
    '挿入された行のIDは5': function(topic) {
      return assert.equal(topic.result.lastID, 5);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /insert (エラー)': {
    topic: function() {
      return GET('/insert', {
        table: 'user',
        fields: 'name,age'
      }, this.callback);
    },
    'httpレスポンスステータスコード: 500': function(topic) {
      return assert.equal(topic.statusCode, 500);
    },
    '1004エラーが発生する': function(topic) {
      return assert.equal(topic.error.errno, 1004);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /update': {
    topic: function() {
      return GET('/update', {
        table: 'user',
        set: "sex = 'male'",
        conditions: "name = 'jack'"
      }, this.callback);
    },
    'httpレスポンスステータスコード: 200': function(topic) {
      return assert.equal(topic.statusCode, 200);
    },
    '実行SQLの検証': function(topic) {
      return assert.equal(topic.result.sql, "UPDATE user SET sex = 'male' WHERE name = 'jack'");
    },
    '更新された行は1行': function(topic) {
      return assert.equal(topic.result.changes, 1);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /update (エラー)': {
    topic: function() {
      return GET('/update', {
        table: 'user',
        conditions: "name = 'jack'"
      }, this.callback);
    },
    'httpレスポンスステータスコード: 500': function(topic) {
      return assert.equal(topic.statusCode, 500);
    },
    '1004エラーが発生する': function(topic) {
      return assert.equal(topic.error.errno, 1004);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /select': {
    topic: function() {
      return GET('/select', {
        table: 'user',
        conditions: "sex = 'male'",
        sort: 'age desc',
        limit: 3
      }, this.callback);
    },
    'httpレスポンスステータスコード: 200': function(topic) {
      return assert.equal(topic.statusCode, 200);
    },
    'insertやupdateが反映されたuserテーブルの内容を取得': function(topic) {
      return assert.deepEqual(topic.result, [
        {
          id: 5,
          name: 'jack',
          sex: 'male',
          age: 50
        }, {
          id: 1,
          name: 'taro',
          sex: 'male',
          age: 30
        }, {
          id: 2,
          name: 'jiro',
          sex: 'male',
          age: 25
        }
      ]);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /select (エラー)': {
    topic: function() {
      return GET('/select', {
        conditions: "sex = 'male'",
        sort: 'age desc',
        limit: 3
      }, this.callback);
    },
    'httpレスポンスステータスコード: 500': function(topic) {
      return assert.equal(topic.statusCode, 500);
    },
    '1004エラーが発生する': function(topic) {
      return assert.equal(topic.error.errno, 1004);
    }
  }
}).addBatch({
  'カスタムhttpメソッドにアクセス': {
    topic: function() {
      return GET('/hoge', {
        sex: 'male',
        age: 20
      }, this.callback);
    },
    'httpレスポンスステータスコード: 200': function(topic) {
      return assert.equal(topic.statusCode, 200);
    },
    '結果の配列を取得': function(topic) {
      return assert.deepEqual(topic.result, [
        {
          id: 1,
          name: 'taro',
          sex: 'male',
          age: 30
        }, {
          id: 2,
          name: 'jiro',
          sex: 'male',
          age: 25
        }, {
          id: 5,
          name: 'jack',
          sex: 'male',
          age: 50
        }
      ]);
    }
  }
}).addBatch({
  'カスタムhttpメソッドにアクセス (0件)': {
    topic: function() {
      return GET('/hoge', {
        sex: 'female',
        age: 20
      }, this.callback);
    },
    'httpレスポンスステータスコード: 200': function(topic) {
      return assert.equal(topic.statusCode, 200);
    },
    '結果の空配列を取得': function(topic) {
      return assert.isEmpty(topic.result);
    }
  }
}).addBatch({
  'カスタムhttpメソッドにアクセス (エラー文字列)': {
    topic: function() {
      return GET('/hoge', {
        sex: 'male',
        age: -1
      }, this.callback);
    },
    'httpレスポンスステータスコード: 500': function(topic) {
      return assert.equal(topic.statusCode, 500);
    },
    '1000エラーが発生する': function(topic) {
      return assert.equal(topic.error.errno, 1000);
    },
    'エラーメッセージ: "error: < 0"': function(topic) {
      return assert.equal(topic.error.message, 'error: < 0');
    }
  }
}).addBatch({
  'カスタムhttpメソッドにアクセス (エラーオブジェクト)': {
    topic: function() {
      return GET('/hoge', {
        sex: 'male',
        age: 101
      }, this.callback);
    },
    'httpレスポンスステータスコード: 500': function(topic) {
      return assert.equal(topic.statusCode, 500);
    },
    '1000エラーが発生する': function(topic) {
      return assert.equal(topic.error.errno, 1000);
    },
    'エラーメッセージ: "error: > 100"': function(topic) {
      return assert.equal(topic.error.message, 'error: > 100');
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /delete': {
    topic: function() {
      return GET('/delete', {
        table: 'user',
        conditions: "name = 'jack'"
      }, this.callback);
    },
    'httpレスポンスステータスコード: 200': function(topic) {
      return assert.equal(topic.statusCode, 200);
    },
    '実行SQLの検証': function(topic) {
      return assert.equal(topic.result.sql, "DELETE FROM user WHERE name = 'jack'");
    },
    '削除された行は1行': function(topic) {
      return assert.equal(topic.result.changes, 1);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /delete (同じ条件で再度)': {
    topic: function() {
      return GET('/delete', {
        table: 'user',
        conditions: "name = 'jack'"
      }, this.callback);
    },
    'httpレスポンスステータスコード: 200': function(topic) {
      return assert.equal(topic.statusCode, 200);
    },
    '削除された行はない': function(topic) {
      return assert.equal(topic.result.changes, 0);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /delete (エラー)': {
    topic: function() {
      return GET('/delete', {
        conditions: "name = 'jack'"
      }, this.callback);
    },
    'httpレスポンスステータスコード: 500': function(topic) {
      return assert.equal(topic.statusCode, 500);
    },
    '1004エラーが発生する': function(topic) {
      return assert.equal(topic.error.errno, 1004);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /create (エラー)': {
    topic: function() {
      return GET('/create', {
        table: 'ids'
      }, this.callback);
    },
    'httpレスポンスステータスコード: 500': function(topic) {
      return assert.equal(topic.statusCode, 500);
    },
    '1004エラーが発生する': function(topic) {
      return assert.equal(topic.error.errno, 1004);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /create': {
    topic: function() {
      return GET('/create', {
        table: 'ids',
        fields: "id INTEGER"
      }, this.callback);
    },
    'httpレスポンスステータスコード: 200': function(topic) {
      return assert.equal(topic.statusCode, 200);
    },
    '実行SQLの検証': function(topic) {
      return assert.equal(topic.result.sql, "CREATE TABLE ids (id INTEGER)");
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /insert (valuesにSELECT文)': {
    topic: function() {
      return GET('/insert', {
        table: 'ids',
        values: "SELECT id FROM user WHERE sex = 'male'"
      }, this.callback);
    },
    'httpレスポンスステータスコード: 200': function(topic) {
      return assert.equal(topic.statusCode, 200);
    },
    '実行SQLの検証': function(topic) {
      return assert.equal(topic.result.sql, "INSERT INTO ids SELECT id FROM user WHERE sex = 'male'");
    },
    '挿入された行は3行': function(topic) {
      return assert.equal(topic.result.changes, 3);
    },
    '最後に挿入された行のIDは3': function(topic) {
      return assert.equal(topic.result.lastID, 3);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /delete (conditionsにin句)': {
    topic: function() {
      return GET('/delete', {
        table: 'user',
        conditions: "id IN (SELECT id FROM ids)"
      }, this.callback);
    },
    'httpレスポンスステータスコード: 200': function(topic) {
      return assert.equal(topic.statusCode, 200);
    },
    '削除された行は3行': function(topic) {
      return assert.equal(topic.result.changes, 3);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /select (count(*))': {
    topic: function() {
      return GET('/select', {
        table: 'user',
        fields: 'count(*) as count'
      }, this.callback);
    },
    'httpレスポンスステータスコード: 200': function(topic) {
      return assert.equal(topic.statusCode, 200);
    },
    'userテーブルの内容は1件': function(topic) {
      return assert.deepEqual(topic.result, [
        {
          count: 1
        }
      ]);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /drop': {
    topic: function() {
      return GET('/drop', {
        table: 'user'
      }, this.callback);
    },
    'httpレスポンスステータスコード: 200': function(topic) {
      return assert.equal(topic.statusCode, 200);
    },
    '実行SQLの検証': function(topic) {
      return assert.equal(topic.result.sql, 'DROP TABLE user');
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /drop (削除したテーブルを再度削除)': {
    topic: function() {
      return GET('/drop', {
        table: 'user'
      }, this.callback);
    },
    'httpレスポンスステータスコード: 500': function(topic) {
      return assert.equal(topic.statusCode, 500);
    },
    '1エラーが発生する': function(topic) {
      return assert.equal(topic.error.errno, 1);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /drop (エラー)': {
    topic: function() {
      return GET('/drop', this.callback);
    },
    'httpレスポンスステータスコード: 500': function(topic) {
      return assert.equal(topic.statusCode, 500);
    },
    '1004エラーが発生する': function(topic) {
      return assert.equal(topic.error.errno, 1004);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /schema': {
    topic: function() {
      return GET('/schema', this.callback);
    },
    'httpレスポンスステータスコード: 200': function(topic) {
      return assert.equal(topic.statusCode, 200);
    },
    'スキーマの検証': function(topic) {
      return assert.deepEqual(topic.result.main, {
        path: '',
        views: {},
        tables: {
          ids: {
            indexes: {},
            fields: [
              {
                name: 'id',
                type: 'INTEGER'
              }
            ],
            sql: 'CREATE TABLE ids (id INTEGER)'
          }
        }
      });
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /reload': {
    topic: function() {
      var _this = this;

      sqlited.close(function() {
        return sqlited.open(dbname, function(err) {
          if (err != null) {
            return _this.callback(err);
          }
          return GET('/reload', _this.callback);
        });
      });
    },
    'httpレスポンスステータスコード: 200': function(topic) {
      return assert.equal(topic.statusCode, 200);
    }
  }
}).addBatch({
  'デフォルトhttpメソッド: /select (開き直したDBへのアクセス確認)': {
    topic: function() {
      return GET('/select', {
        table: 'test1'
      }, this.callback);
    },
    'httpレスポンスステータスコード: 200': function(topic) {
      return assert.equal(topic.statusCode, 200);
    },
    'test1テーブルにデータの件数は3件': function(topic) {
      return assert.equal(topic.result.length, 3);
    },
    'test1テーブルの内容の検証': function(topic) {
      var i, r, _i, _len, _ref, _results;

      _ref = topic.result;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        r = _ref[i];
        assert.equal(r.c1, i + 1);
        _results.push(assert.equal(r.c2, "てすと0" + (i + 1)));
      }
      return _results;
    }
  }
}).addBatch({
  'カスタムhttpメソッドを削除': {
    topic: function() {
      sqlited.removeMethod('/hoge');
      return sqlited.methods();
    },
    'メソッドが削除されている': function(topic) {
      return assert.equal(topic.indexOf('/hoge'), -1);
    },
    '他のメソッドは残っている': function(topic) {
      return assert.isNotZero(topic.length);
    }
  }
}).addBatch({
  '削除したカスタムhttpメソッドにアクセス(エラー)': {
    topic: function() {
      return GET('/hoge', {
        sex: 'male',
        age: 20
      }, this.callback);
    },
    'httpレスポンスステータスコード: 404': function(topic) {
      return assert.equal(topic.statusCode, 404);
    },
    '1001エラーが発生する': function(topic) {
      return assert.equal(topic.error.errno, 1001);
    }
  }
}).addBatch({
  '削除したカスタムhttpメソッドを再度削除': {
    topic: function() {
      return sqlited.removeMethod('/hoge');
    },
    '削除失敗': function(topic) {
      return assert.isFalse(topic);
    }
  }
}).addBatch({
  'httpサーバー終了': {
    topic: function() {
      var _this = this;

      sqlited.shutdown(function() {
        return HEAD('/select', {
          table: 'test1'
        }, _this.callback);
      });
    },
    '接続できない': function(topic) {
      return assert.equal(topic.errno, 'ECONNREFUSED');
    }
  }
}).addBatch({
  'httpサーバー再公開': {
    topic: function() {
      var _this = this;

      sqlited.listen(function() {
        return GET('/select', {
          table: 'test1'
        }, _this.callback);
      });
    },
    '接続できる': function(topic) {
      return assert.equal(topic.statusCode, 200);
    },
    'test1テーブルにデータの件数は3件': function(topic) {
      return assert.equal(topic.result.length, 3);
    },
    'test1テーブルの内容の検証': function(topic) {
      var i, r, _i, _len, _ref, _results;

      _ref = topic.result;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        r = _ref[i];
        assert.equal(r.c1, i + 1);
        _results.push(assert.equal(r.c2, "てすと0" + (i + 1)));
      }
      return _results;
    }
  }
}).addBatch({
  'カスタムhttpメソッドをクリア': {
    topic: function() {
      sqlited.clearMethod();
      return sqlited.methods();
    },
    'メソッドが空になっている': function(topic) {
      return assert.isEmpty(topic);
    }
  }
})["export"](module);
