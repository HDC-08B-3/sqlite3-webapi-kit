// Generated by CoffeeScript 1.12.6

/**
* デフォルトhttpメソッド
*
* - クラスではないがドキュメントで識別しやすくする為に便宜上クラス扱いとする
*
* @class apiMethods
 */
var apiMethods;

apiMethods = {

  /**
  * SQLを直接指定
  *
  * @public
  * @method /query
  * @param param {Object} リクエストに付加されたパラメータ
  * @param param.sql {String} SQL文字列
  * @param callback {Function} (エラーオブジェクト, 実行結果)
  * @example http://localhost:4983/query?sql=select%20name%20from%20user
   */
  '/query': function(param, callback) {
    var method;
    method = (/^\s*select\s/i.test(param.sql) ? this.get : this.post);
    return method(param.sql, callback);
  },

  /**
  * SELECT文を実行
  *
  * @public
  * @method /select
  * @param param {Object} リクエストに付加されたパラメータ
  * @param param.talbe {string} テーブル名(必須)
  * @param param.fields {String} 項目(デフォルト: *)
  * @param param.conditions {String} 抽出条件(WHERE句以降)
  * @param param.sort {String} 並び順(ORDER BY句以降)
  * @param param.limit {Number} 抽出件数上限(LIMIT句以降)
  * @param param.skip {Number} 取得開始レコード位置(SKIP句以降)
  * @param callback {Function} (エラーオブジェクト, 実行結果)
  * @example http://localhost:4983/select?table=user&fields=rowid,name,age&limit=10&sort=age
   */
  '/select': function(param, callback) {
    var ref, sql;
    if (!param.table) {
      return callback(1004);
    }
    sql = "SELECT " + ((ref = param.fields) != null ? ref : '*') + " FROM " + param.table;
    if (param.conditions) {
      sql += " WHERE " + param.conditions;
    }
    if (param.sort) {
      sql += " ORDER BY " + param.sort;
    }
    if (param.limit) {
      sql += " LIMIT " + param.limit;
    }
    return this.get(sql, callback);
  },

  /**
  * UPDATE文を実行
  *
  * @public
  * @method /update
  * @param param {Object} リクエストに付加されたパラメータ
  * @param param.talbe {String} テーブル名(必須)
  * @param param.set {String} 更新内容(必須)
  * @param param.conditions {String} 抽出条件(WHERE句以降)
  * @param callback {Function} (エラーオブジェクト, 実行結果)
  * @example http://localhost:4983/update?table=user&set=name=%27taro%27,age=20&conditions=flag%20is%20null
   */
  '/update': function(param, callback) {
    var sql;
    if (!param.table || !param.set) {
      return callback(1004);
    }
    sql = "UPDATE " + param.table + " SET " + param.set;
    if (param.conditions) {
      sql += " WHERE " + param.conditions;
    }
    return this.post(sql, callback);
  },

  /**
  * INSERT文を実行
  *
  * @public
  * @method /insert
  * @param param {Object} リクエストに付加されたパラメータ
  * @param param.talbe {String} テーブル名(必須)
  * @param param.fields {String} 項目指定(デフォルト: なし(全項目))
  * @param param.values {String} 挿入項目 or SELECT文
  * @param callback {Function} (エラーオブジェクト, 実行結果)
  * @example http://localhost:4983/insert?table=user&fields=name,age&values=%27hanako%27,30
   */
  '/insert': function(param, callback) {
    var sql, valueIsSQL;
    if (!param.table || !param.values) {
      return callback(1004);
    }
    sql = "INSERT INTO " + param.table + " ";
    if (param.fields) {
      sql += "(" + param.fields + ") ";
    }
    valueIsSQL = /^select\s/i.test(param.values);
    if (!valueIsSQL) {
      sql += "VALUES (";
    }
    sql += param.values;
    if (!valueIsSQL) {
      sql += ")";
    }
    return this.post(sql, callback);
  },

  /**
  * DELETE文を実行
  *
  * @public
  * @method /delete
  * @param param {Object} リクエストに付加されたパラメータ
  * @param param.talbe {String} テーブル名(必須)
  * @param param.conditions {String} 抽出条件(WHERE句以降)
  * @param callback {Function} (エラーオブジェクト, 実行結果)
  * @example http://localhost:4983/delete?table=user&conditions=age<10
   */
  '/delete': function(param, callback) {
    var sql;
    if (!param.table) {
      return callback(1004);
    }
    sql = "DELETE FROM " + param.table;
    if (param.conditions) {
      sql += " WHERE " + param.conditions;
    }
    return this.post(sql, callback);
  },

  /**
  * CREATE TABLE文を実行
  *
  * @public
  * @method /create
  * @param param {Object} リクエストに付加されたパラメータ
  * @param param.talbe {String} テーブル名(必須)
  * @param param.fields {String} 作成する項目
  * @param callback {Function} (エラーオブジェクト, 実行結果)
  * @example http://localhost:4983/create?table=user&fields=id%20integer%20primary%20key,name%20varchar(100)
   */
  '/create': function(param, callback) {
    var sql;
    if (!param.table || !param.fields) {
      return callback(1004);
    }
    sql = "CREATE TABLE " + param.table + " (" + param.fields + ")";
    return this.post(sql, callback);
  },

  /**
  * DROP TABLE文を実行
  *
  * @public
  * @method /drop
  * @param param {Object} リクエストに付加されたパラメータ
  * @param param.talbe {String} テーブル名(必須)
  * @param callback {Function} (エラーオブジェクト, 実行結果)
  * @example http://localhost:4983/drop?table=user
   */
  '/drop': function(param, callback) {
    var sql;
    if (!param.table) {
      return callback(1004);
    }
    sql = "DROP TABLE " + param.table;
    return this.post(sql, callback);
  },

  /**
  * スキーマ情報のオブジェクトを取得
  *
  * @public
  * @method /schema
  * @param param {Object} リクエストに付加されたパラメータ
  * @param callback {Function} (エラーオブジェクト, 実行結果)
   */
  '/schema': function(param, callback) {
    return this.schema(callback);
  },

  /**
  * データベースの再読み込み
  *
  * @public
  * @method /reload
  * @param param {Object} リクエストに付加されたパラメータ
  * @param callback {Function} (エラーオブジェクト, 実行結果)
   */
  '/reload': function(param, callback) {
    var dbname;
    dbname = this.dbname();
    return this.close((function(_this) {
      return function(err) {
        if (err != null) {
          return callback(err);
        }
        return _this.open(dbname, _this.onopen, function(err) {
          if (err != null) {
            return callback(err);
          }
          return callback(void 0, 'OK');
        });
      };
    })(this));
  }
};

module.exports = apiMethods;
